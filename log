inserting a into b,c,d,e,f,g, low = 0, high = 5
comparing opt a to d at midpoint 2
winner is d
opt a is < d, recursing on lower half
inserting a into b,c,d,e,f,g, low = 0, high = 2
comparing opt a to c at midpoint 1
winner is c
opt a is < c, recursing on lower half
inserting a into b,c,d,e,f,g, low = 0, high = 1
comparing opt a to b at midpoint 0
winner is b
opt a is < b, recursing on lower half
inserting a into b,c,d,e,f,g, low = 0, high = 0
low/high converged in non empty array, compart opt to point of convergence
opt a is <= b, inserting at/before convergence point
opt a is === b, returning mid point 0
opt a is === c, returning mid point 1
opt a is === d, returning mid point 2
